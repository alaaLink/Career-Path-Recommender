@model CareerPathRecommender.Application.DTOs.SkillGapAnalysisDto

<div class="fade-in">
    <!-- Analysis Header -->
    <div class="analysis-header mb-4 p-4 rounded" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
        <div class="row align-items-center">
            <div class="col-md-10">
                <h5 class="mb-1">
                    <i class="fas fa-user-graduate me-2"></i>
                    Career Path Analysis for @Model.EmployeeName
                </h5>
                <p class="mb-2 opacity-75">
                    @Model.CurrentPosition â†’ @Model.TargetPosition
                </p>
                <div class="d-flex gap-3">
                    <small><i class="fas fa-calendar me-1"></i>Analyzed: @Model.AnalysisDate.ToString("MMM dd, yyyy")</small>
                    <small><i class="fas fa-clock me-1"></i>@Model.YearsOfExperience years experience</small>
                </div>
            </div>
            <div class="col-md-2">
                <div class="readiness-circle position-relative d-inline-block" style="width: 80px; height: 80px;">
                    <svg width="80" height="80" class="position-absolute">
                        <circle cx="40" cy="40" r="35" stroke="rgba(255,255,255,0.3)" stroke-width="4" fill="none"/>
                        <circle cx="40" cy="40" r="35" stroke="white" stroke-width="4" fill="none"
                                stroke-dasharray="@(220 * (Model.OverallReadiness / 100))"
                                stroke-dashoffset="0"
                                transform="rotate(-90 40 40)"/>
                    </svg>
                    <div class="position-absolute top-50 start-50 translate-middle text-center">
                        <div class="h5 mb-0">@Model.OverallReadiness.ToString("F0")%</div>
                        <small style="font-size: 0.7rem;">Ready</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Stats -->
        <div class="row mt-3 text-center">
            <div class="col-3">
                <div class="h6 mb-0">@Model.SkillsMet/@Model.TotalSkillsRequired</div>
                <small class="opacity-75">Skills Met</small>
            </div>
            <div class="col-3">
                <div class="h6 mb-0 text-warning">@Model.HighPriorityGaps</div>
                <small class="opacity-75">High Priority</small>
            </div>
            <div class="col-3">
                <div class="h6 mb-0 text-info">@Model.EstimatedTimeToTargetMonths</div>
                <small class="opacity-75">Months</small>
            </div>
            <div class="col-3">
                <div class="h6 mb-0 text-success">@Model.MilestoneTimeline.Count</div>
                <small class="opacity-75">Milestones</small>
            </div>
        </div>
    </div>
    
    <div class="row">
        <!-- Missing Skills -->
        <div class="col-lg-6 mb-4">
            <div class="h-100">
                <div class="d-flex align-items-center mb-3">
                    <div class="bg-danger rounded-circle p-2 me-3">
                        <i class="fas fa-exclamation-triangle text-white"></i>
                    </div>
                    <div>
                        <h6 class="mb-0 text-danger">Skills to Acquire</h6>
                        <small class="text-muted">Critical gaps for your target role</small>
                    </div>
                </div>
                
                @if (Model.MissingSkills.Any())
                {
                    @foreach (var gap in Model.MissingSkills.OrderByDescending(g => g.Priority))
                    {
                        <div class="skill-gap-item p-3 mb-3 rounded shadow-sm priority-@gap.Priority" style="border-left: 4px solid;">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <div class="flex-grow-1">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <div>
                                            <h6 class="mb-1 fw-bold">@gap.SkillName</h6>
                                            <span class="badge bg-light text-dark small">@gap.Category</span>
                                        </div>
                                        <div >
                                            <div class="d-flex align-items-center">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    <i class="fas fa-star @(i <= gap.Priority ? "text-warning" : "text-muted")" style="font-size: 0.8rem;"></i>
                                                }
                                            </div>
                                            <small class="text-muted">Priority @gap.Priority</small>
                                        </div>
                                    </div>

                                    <div class="d-flex align-items-center gap-2 mb-2">
                                        <span class="badge bg-secondary">Current: @gap.CurrentLevel</span>
                                        <i class="fas fa-arrow-right text-muted"></i>
                                        <span class="badge bg-success">Target: @gap.RequiredLevel</span>
                                        <span class="badge bg-info">~@gap.EstimatedLearningTimeMonths months</span>
                                    </div>

                                    <div class="importance-bar mb-2">
                                        <div class="progress" style="height: 4px;">
                                            <div class="progress-bar bg-gradient" style="width: @(gap.ImportanceScore * 100)%; background: linear-gradient(90deg, #28a745 0%, #20c997 100%);"></div>
                                        </div>
                                        <small class="text-muted">Importance: @gap.ImportanceScore.ToString("P0")</small>
                                    </div>

                                    @if (gap.RecommendedResources.Any())
                                    {
                                        <div class="resources-section mb-2">
                                            <small class="text-muted d-block mb-1">
                                                <i class="fas fa-book me-1"></i>Recommended Resources:
                                            </small>
                                            <div class="d-flex flex-wrap gap-1">
                                                @foreach (var resource in gap.RecommendedResources.Take(2))
                                                {
                                                    <span class="badge bg-outline-primary small">@resource</span>
                                                }
                                                @if (gap.RecommendedResources.Count() > 2)
                                                {
                                                    <span class="badge bg-outline-secondary small">+@(gap.RecommendedResources.Count() - 2) more</span>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                            <p class="small text-muted mb-0">
                                <i class="fas fa-lightbulb text-warning me-1"></i>
                                @gap.Reasoning
                            </p>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center p-4 bg-light rounded">
                        <i class="fas fa-check-circle fa-2x text-success mb-2"></i>
                        <p class="mb-0 text-success">Great! No critical skill gaps identified.</p>
                    </div>
                }
            </div>
        </div>

        <!-- Skills to Improve -->
        <div class="col-lg-6 mb-4">
            <div class="h-100">
                <div class="d-flex align-items-center mb-3">
                    <div class="bg-warning rounded-circle p-2 me-3">
                        <i class="fas fa-arrow-up text-white"></i>
                    </div>
                    <div>
                        <h6 class="mb-0 text-warning">Skills to Enhance</h6>
                        <small class="text-muted">Areas for improvement and growth</small>
                    </div>
                </div>
                
                @if (Model.SkillsToImprove.Any())
                {
                    @foreach (var gap in Model.SkillsToImprove.OrderByDescending(g => g.Priority))
                    {
                        <div class="skill-gap-item p-3 mb-3 rounded shadow-sm priority-@gap.Priority" style="border-left: 4px solid;">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <div>
                                    <h6 class="mb-1 fw-bold">@gap.SkillName</h6>
                                    <div class="d-flex align-items-center gap-2 mb-2">
                                        <span class="badge bg-info">@gap.CurrentLevel</span>
                                        <i class="fas fa-arrow-right text-muted"></i>
                                        <span class="badge bg-primary">@gap.RequiredLevel</span>
                                    </div>
                                </div>
                                <div class="text-end">
                                    <div class="progress-ring position-relative" style="width: 40px; height: 40px;">
                                        <svg width="40" height="40" class="position-absolute">
                                            <circle cx="20" cy="20" r="18" stroke="#e9ecef" stroke-width="3" fill="none"/>
                                            <circle cx="20" cy="20" r="18" stroke="#007bff" stroke-width="3" fill="none"
                                                    stroke-dasharray="@(113 * ((int)gap.CurrentLevel / 4.0))" 
                                                    stroke-dashoffset="0" 
                                                    transform="rotate(-90 20 20)"/>
                                        </svg>
                                        <div class="position-absolute top-50 start-50 translate-middle">
                                            <small class="fw-bold">@((int)gap.CurrentLevel)/4</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <p class="small text-muted mb-0">
                                <i class="fas fa-info-circle text-info me-1"></i>
                                @gap.Reasoning
                            </p>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center p-4 bg-light rounded">
                        <i class="fas fa-trophy fa-2x text-warning mb-2"></i>
                        <p class="mb-0 text-warning">All current skills are at target level!</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Learning Path & Timeline -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-gradient text-white" style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="mb-0">
                                <i class="fas fa-route"></i> Recommended Learning Path
                            </h6>
                            <small class="opacity-75">Your personalized career development roadmap</small>
                        </div>
                        <div class="badge bg-white text-primary">
                            <i class="fas fa-clock me-1"></i>@Model.EstimatedTimeToTargetMonths months
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="learning-path">
                        @{
                            var pathLines = Model.RecommendedLearningPath.Split('\n', StringSplitOptions.RemoveEmptyEntries);
                        }
                        
                        @foreach (var line in pathLines)
                        {
                            if (line.StartsWith("**") && line.EndsWith("**"))
                            {
                                var title = line.Trim('*');
                                <div class="phase-header mt-4 mb-3">
                                    <h6 class="text-primary fw-bold">
                                        <i class="fas fa-flag text-warning me-2"></i>@title
                                    </h6>
                                    <hr class="mt-2" style="border-color: #007bff; border-width: 2px;">
                                </div>
                            }
                            else if (line.StartsWith("â€¢"))
                            {
                                <div class="learning-step mb-2 p-2 rounded bg-light border-start border-3 border-primary">
                                    <i class="fas fa-check-circle text-success me-2"></i>
                                    @line.Substring(1).Trim()
                                </div>
                            }
                            else if (!string.IsNullOrWhiteSpace(line))
                            {
                                <p class="mb-2">@line</p>
                            }
                        }
                    </div>
                    
                    <!-- Dynamic Action Items -->
                    <div class="mt-4 p-3 bg-primary bg-opacity-10 rounded">
                        <h6 class="text-primary">
                            <i class="fas fa-tasks"></i> Immediate Action Items
                        </h6>
                        <div class="row">
                            @if (Model.NextActionItems.Any())
                            {
                                @foreach (var (item, index) in Model.NextActionItems.Select((item, index) => (item, index)))
                                {
                                    <div class="col-md-6 mb-2">
                                        <div class="d-flex align-items-start">
                                            <div class="me-2 mt-1">
                                                <span class="badge bg-primary rounded-circle" style="width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; font-size: 0.75rem;">
                                                    @(index + 1)
                                                </span>
                                            </div>
                                            <span class="small">@item</span>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                    
                    <!-- Dynamic Milestone Timeline -->
                    @if (Model.MilestoneTimeline.Any())
                    {
                        <div class="mt-4">
                            <h6 class="mb-3">
                                <i class="fas fa-map-marked-alt text-info"></i> Career Development Milestones
                            </h6>
                            <div class="timeline-container">
                                @foreach (var (milestone, index) in Model.MilestoneTimeline.Select((m, i) => (m, i)))
                                {
                                    <div class="milestone-item d-flex mb-4">
                                        <div class="milestone-marker me-3 position-relative">
                                            <div class="milestone-circle bg-primary text-white rounded-circle d-flex align-items-center justify-content-center"
                                                 style="width: 40px; height: 40px; font-size: 0.8rem;">
                                                @milestone.Month
                                            </div>
                                            @if (index < Model.MilestoneTimeline.Count - 1)
                                            {
                                                <div class="milestone-line bg-primary position-absolute"
                                                     style="width: 2px; height: 60px; left: 19px; top: 40px; opacity: 0.3;"></div>
                                            }
                                        </div>
                                        <div class="milestone-content flex-grow-1">
                                            <h6 class="mb-1 text-primary">@milestone.Title</h6>
                                            <p class="mb-2 text-muted small">@milestone.Description</p>
                                            @if (milestone.SkillsToComplete.Any())
                                            {
                                                <div class="skills-badges">
                                                    @foreach (var skill in milestone.SkillsToComplete)
                                                    {
                                                        <span class="badge bg-light text-dark me-1 mb-1">
                                                            <i class="fas fa-check-circle text-success me-1"></i>@skill
                                                        </span>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Overall Progress Bar -->
                        <div class="mt-4">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="mb-0">
                                    <i class="fas fa-chart-line text-success"></i> Overall Progress Timeline
                                </h6>
                                <span class="badge bg-success">@Model.EstimatedTimeToTargetMonths months to target</span>
                            </div>
                            <div class="progress mb-2" style="height: 12px; border-radius: 6px;">
                                <div class="progress-bar bg-gradient position-relative"
                                     style="width: 15%; background: linear-gradient(90deg, #28a745 0%, #20c997 100%);">
                                    <small class="position-absolute text-white" style="left: 10px; font-size: 0.7rem; line-height: 12px;">Start</small>
                                </div>
                            </div>
                            <div class="d-flex justify-content-between small text-muted">
                                <span><i class="fas fa-play-circle text-success me-1"></i>Today</span>
                                <span><i class="fas fa-flag-checkered text-primary me-1"></i>Month @Model.EstimatedTimeToTargetMonths</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .phase-header h6 {
        position: relative;
        padding-left: 20px;
    }
    
    .phase-header h6::before {
        content: '';
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background: linear-gradient(45deg, #007bff, #00f2fe);
    }
    
    .learning-step {
        transition: all 0.3s ease;
        cursor: pointer;
    }
    
    .learning-step:hover {
        background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%) !important;
        transform: translateX(5px);
    }
    
    .progress-ring circle {
        transition: stroke-dasharray 0.8s ease;
    }
</style>