@model CareerPathRecommender.Web.Models.DashboardViewModel

<div class="row fade-in-up">
    <!-- Enhanced Employee Profile Card -->
    <div class="col-lg-4 mb-4">
        <div class="card-modern h-100 hover-lift">
            <div class="card-header bg-gradient text-white p-4" style="background: var(--primary-gradient);">
                <div class="d-flex align-items-center">
                    <div class="avatar-container me-3" style="width: 60px; height: 60px; background: rgba(255,255,255,0.2); border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                        <i class="fas fa-user-circle fa-3x text-white"></i>
                    </div>
                    <div class="flex-grow-1">
                        <h5 class="mb-1 fw-bold">@Model.SelectedEmployee!.FullName</h5>
                        <small class="opacity-75">
                            <i class="fas fa-id-badge me-1"></i>Employee Profile
                        </small>
                        <div class="mt-2">
                            @if (Model.SelectedEmployee.YearsOfExperience >= 10)
                            {
                                <span class="badge bg-warning bg-opacity-20 border border-warning text-warning">
                                    <i class="fas fa-star me-1"></i>Expert
                                </span>
                            }
                            else if (Model.SelectedEmployee.YearsOfExperience >= 5)
                            {
                                <span class="badge bg-success bg-opacity-20 border border-success text-success">
                                    <i class="fas fa-crown me-1"></i>Senior
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-info bg-opacity-20 border border-info text-info">
                                    <i class="fas fa-seedling me-1"></i>Growing
                                </span>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-body p-4">
                <!-- Enhanced Info Cards -->
                <div class="row g-3 mb-4">
                    <div class="col-6">
                        <div class="stat-card text-center hover-scale">
                            <div class="mb-2">
                                <i class="fas fa-briefcase fa-2x" style="background: var(--primary-gradient); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;"></i>
                            </div>
                            <div class="fw-bold text-truncate" title="@Model.SelectedEmployee.Position">@Model.SelectedEmployee.Position</div>
                            <small class="text-muted">Position</small>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="stat-card text-center hover-scale">
                            <div class="mb-2">
                                <i class="fas fa-building fa-2x" style="background: var(--success-gradient); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;"></i>
                            </div>
                            <div class="fw-bold text-truncate" title="@Model.SelectedEmployee.Department">@Model.SelectedEmployee.Department</div>
                            <small class="text-muted">Department</small>
                        </div>
                    </div>
                </div>
                
                <!-- Editable Experience Showcase -->
                <div class="text-center mb-4">
                    <div class="d-inline-block position-relative">
                        <div class="stat-card p-3 experience-editor">
                            <div class="d-flex align-items-center justify-content-center gap-2">
                                <div class="position-relative">
                                    <svg width="50" height="50" viewBox="0 0 50 50">
                                        <circle cx="25" cy="25" r="20" stroke="var(--gray-300)" stroke-width="3" fill="none"/>
                                        <circle cx="25" cy="25" r="20" stroke="url(#experienceGradient)" stroke-width="3" fill="none"
                                                stroke-dasharray="@(125 * Math.Min(1, Model.SelectedEmployee.YearsOfExperience / 15.0))"
                                                stroke-dashoffset="0"
                                                transform="rotate(-90 25 25)"
                                                stroke-linecap="round"/>
                                        <defs>
                                            <linearGradient id="experienceGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                                                <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
                                                <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
                                            </linearGradient>
                                        </defs>
                                    </svg>
                                    <div class="position-absolute top-50 start-50 translate-middle text-center">
                                        <div class="fw-bold experience-display" id="experienceDisplay">@Model.SelectedEmployee.YearsOfExperience</div>
                                        <small class="text-muted" style="font-size: 0.65rem;">yrs</small>
                                    </div>
                                </div>
                                <div class="text-start">
                                    <div class="fw-bold d-flex align-items-center">
                                        Experience Level
                                        <button class="btn btn-sm btn-outline-primary ms-2" onclick="editExperience()" title="Edit Experience">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                    </div>
                                    <small class="text-muted">Professional Journey</small>
                                </div>
                            </div>

                            <!-- Hidden Experience Edit Form -->
                            <div class="experience-edit-form mt-3" id="experienceEditForm" style="display: none;">
                                <div class="d-flex align-items-center gap-2">
                                    <input type="number" class="form-control form-control-sm" id="experienceInput"
                                           value="@Model.SelectedEmployee.YearsOfExperience" min="0" max="50" style="width: 80px;">
                                    <button class="btn btn-sm btn-success" onclick="saveExperience()">
                                        <i class="fas fa-save"></i>
                                    </button>
                                    <button class="btn btn-sm btn-secondary" onclick="cancelEditExperience()">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Enhanced Skills Section -->
                <div class="mb-4">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="fw-bold mb-0 d-flex align-items-center">
                            <div class="me-2 p-2 rounded-circle" style="background: var(--info-gradient); width: 32px; height: 32px; display: flex; align-items: center; justify-content: center;">
                                <i class="fas fa-cogs text-white"></i>
                            </div>
                            Current Skills
                            <span class="badge badge-soft-primary ms-2" id="skillsCount">@Model.SelectedEmployee.Skills.Count() skills</span>
                        </h6>
                        <button class="btn btn-sm btn-success" onclick="showAddSkillModal()" title="Add New Skill">
                            <i class="fas fa-plus me-1"></i>Add Skill
                        </button>
                    </div>
                    
                    <div class="skills-container mb-3" id="skillsContainer">
                        @foreach (var skill in Model.SelectedEmployee.Skills)
                        {
                            var skillConfig = skill.Level switch
                            {
                                CareerPathRecommender.Domain.Enums.SkillLevel.Beginner => new { Color = "secondary", Icon = "seedling", Gradient = "--gray-400" },
                                CareerPathRecommender.Domain.Enums.SkillLevel.Intermediate => new { Color = "warning", Icon = "chart-line", Gradient = "--warning-gradient" },
                                CareerPathRecommender.Domain.Enums.SkillLevel.Advanced => new { Color = "success", Icon = "trophy", Gradient = "--success-gradient" },
                                CareerPathRecommender.Domain.Enums.SkillLevel.Expert => new { Color = "primary", Icon = "crown", Gradient = "--primary-gradient" },
                                _ => new { Color = "secondary", Icon = "circle", Gradient = "--gray-400" }
                            };

                            <div class="skill-badge d-inline-block me-2 mb-2 position-relative hover-lift"
                                 data-skill-id="@skill.Skill.Id"
                                 style="background: white; border: 2px solid var(--gray-200); border-radius: var(--radius-lg); padding: 0.5rem 0.75rem; transition: all var(--transition-normal);">
                                <div class="d-flex align-items-center gap-2">
                                    <i class="fas fa-@skillConfig.Icon text-@skillConfig.Color"></i>
                                    <span class="fw-medium">@skill.Skill.Name</span>
                                    <span class="badge badge-soft-@skillConfig.Color">@skill.Level</span>
                                    <button class="btn btn-sm p-0 ms-1 text-danger skill-remove-btn"
                                            onclick="removeSkill(@skill.Skill.Id, '@skill.Skill.Name')"
                                            title="Remove Skill"
                                            style="width: 20px; height: 20px; display: flex; align-items: center; justify-content: center; border: none; background: none; font-size: 0.7rem;">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <!-- Skills Summary -->
                    <div class="row g-2 mb-3">
                        @{
                            var skillLevels = Model.SelectedEmployee.Skills.GroupBy(s => s.Level).ToDictionary(g => g.Key, g => g.Count());
                        }
                        @foreach (var level in Enum.GetValues<CareerPathRecommender.Domain.Enums.SkillLevel>())
                        {
                            var count = skillLevels.GetValueOrDefault(level, 0);
                            var percentage = count > 0 ? (count * 100.0 / Model.SelectedEmployee.Skills.Count()) : 0;
                            var levelConfig = level switch
                            {
                                CareerPathRecommender.Domain.Enums.SkillLevel.Beginner => new { Color = "secondary", Label = "Beginner" },
                                CareerPathRecommender.Domain.Enums.SkillLevel.Intermediate => new { Color = "warning", Label = "Intermediate" },
                                CareerPathRecommender.Domain.Enums.SkillLevel.Advanced => new { Color = "success", Label = "Advanced" },
                                CareerPathRecommender.Domain.Enums.SkillLevel.Expert => new { Color = "primary", Label = "Expert" },
                                _ => new { Color = "secondary", Label = "Unknown" }
                            };
                            
                            if (count > 0)
                            {
                                <div class="col-6">
                                    <div class="text-center p-2 bg-@levelConfig.Color bg-opacity-10 rounded">
                                        <div class="fw-bold text-@levelConfig.Color">@count</div>
                                        <small class="text-muted">@levelConfig.Label</small>
                                        <div class="progress progress-modern mt-1" style="height: 3px;">
                                            <div class="progress-bar bg-@levelConfig.Color" style="width: @percentage.ToString("F0")%"></div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
                
                <!-- Skills Info Box -->
                <div class="p-3 rounded-3" style="background: var(--info-gradient); background-size: 200% 200%; animation: gradientShift 3s ease infinite;">
                    <div class="d-flex align-items-start text-white">
                        <i class="fas fa-info-circle me-2 mt-1"></i>
                        <div>
                            <small class="fw-medium">Skills are categorized by proficiency level</small>
                            <div class="mt-1" style="font-size: 0.75rem; opacity: 0.9;">
                                Ranging from Beginner to Expert based on experience and competency
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Enhanced Recommendations -->
    <div class="col-lg-8 mb-4">
        <div class="card-modern h-100 hover-lift">
            <div class="card-header bg-gradient text-white p-4" style="background: var(--secondary-gradient);">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="mb-1 fw-bold d-flex align-items-center">
                            <div class="me-2 p-2 rounded-circle bg-white bg-opacity-20">
                                <i class="fas fa-brain text-white"></i>
                            </div>
                            AI-Powered Recommendations
                        </h5>
                        <small class="opacity-75">
                            <i class="fas fa-user me-1"></i>Personalized for @Model.SelectedEmployee.FullName
                        </small>
                    </div>
                    <div class="text-end">
                        <div class="badge bg-white text-primary fw-bold mb-1">
                            @Model.Recommendations.Count items
                        </div>
                        @if (Model.Recommendations.Any())
                        {
                            <div class="small text-white opacity-75">
                                Avg: @((Model.Recommendations.Average(r => (double)r.ConfidenceScore) * 100).ToString("F0"))% confidence
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="card-body">
                @if (Model.Recommendations.Any())
                {
                    <div class="recommendations-grid">
                        @foreach (var recommendation in Model.Recommendations)
                        {
                            var typeIcon = recommendation.Type switch
                            {
                                CareerPathRecommender.Domain.Enums.RecommendationType.Course => "graduation-cap",
                                CareerPathRecommender.Domain.Enums.RecommendationType.Mentor => "user-friends",
                                CareerPathRecommender.Domain.Enums.RecommendationType.Project => "project-diagram",
                                CareerPathRecommender.Domain.Enums.RecommendationType.Certification => "award",
                                _ => "lightbulb"
                            };

                            var typeColor = recommendation.Type switch
                            {
                                CareerPathRecommender.Domain.Enums.RecommendationType.Course => "primary",
                                CareerPathRecommender.Domain.Enums.RecommendationType.Mentor => "success",
                                CareerPathRecommender.Domain.Enums.RecommendationType.Project => "warning",
                                CareerPathRecommender.Domain.Enums.RecommendationType.Certification => "info",
                                _ => "secondary"
                            };

                            var typeGradient = recommendation.Type switch
                            {
                                CareerPathRecommender.Domain.Enums.RecommendationType.Course => "var(--primary-gradient)",
                                CareerPathRecommender.Domain.Enums.RecommendationType.Mentor => "var(--success-gradient)",
                                CareerPathRecommender.Domain.Enums.RecommendationType.Project => "var(--warning-gradient)",
                                CareerPathRecommender.Domain.Enums.RecommendationType.Certification => "var(--info-gradient)",
                                _ => "var(--secondary-gradient)"
                            };

                            <div class="recommendation-card-modern mb-4" id="rec-@recommendation.Id" data-type="@recommendation.Type.ToString().ToLower()">
                                <!-- Card Header with Type Badge and Priority -->
                                <div class="card-header-modern" style="background: @typeGradient;">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex align-items-center">
                                            <div class="icon-container me-3">
                                                <i class="fas fa-@typeIcon"></i>
                                            </div>
                                            <div>
                                                <h6 class="mb-0 text-white fw-bold">@recommendation.Title</h6>
                                                <small class="text-white-50">@recommendation.Type</small>
                                            </div>
                                        </div>
                                        <div class="d-flex align-items-center gap-2">
                                            <!-- Priority Stars -->
                                            <div class="priority-stars">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    <i class="fas fa-star @(i <= recommendation.Priority ? "active" : "")"></i>
                                                }
                                            </div>
                                            <!-- Confidence Score -->
                                            <div class="confidence-badge">
                                                <div class="confidence-circle" data-confidence="@((int)(recommendation.ConfidenceScore * 100))">
                                                    <span>@((int)(recommendation.ConfidenceScore * 100))%</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Card Body -->
                                <div class="card-body-modern p-4">
                                    <p class="text-muted mb-3 lh-lg">@recommendation.Description</p>

                                    <!-- Enhanced AI Reasoning Box -->
                                    <div class="ai-reasoning-modern mb-4">
                                        <div class="reasoning-header mb-2">
                                            <div class="d-flex align-items-center">
                                                <div class="ai-icon me-2">
                                                    <i class="fas fa-brain"></i>
                                                </div>
                                                <span class="fw-bold text-dark">AI Analysis</span>
                                                <div class="reasoning-line ms-auto"></div>
                                            </div>
                                        </div>
                                        <div class="reasoning-content">
                                            @recommendation.Reasoning
                                        </div>
                                    </div>

                                    <!-- Enhanced Metrics Row -->
                                    <div class="metrics-row mb-4">
                                        <div class="row g-3">
                                            <div class="col-4">
                                                <div class="metric-card text-center">
                                                    <div class="metric-icon mb-1">
                                                        <i class="fas fa-chart-line text-success"></i>
                                                    </div>
                                                    <div class="metric-value">@((recommendation.ConfidenceScore * 100).ToString("F0"))%</div>
                                                    <small class="metric-label">Match</small>
                                                </div>
                                            </div>
                                            <div class="col-4">
                                                <div class="metric-card text-center">
                                                    <div class="metric-icon mb-1">
                                                        <i class="fas fa-star text-warning"></i>
                                                    </div>
                                                    <div class="metric-value">@recommendation.Priority</div>
                                                    <small class="metric-label">Priority</small>
                                                </div>
                                            </div>
                                            <div class="col-4">
                                                <div class="metric-card text-center">
                                                    <div class="metric-icon mb-1">
                                                        <i class="fas fa-clock text-info"></i>
                                                    </div>
                                                    <div class="metric-value">New</div>
                                                    <small class="metric-label">Status</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Enhanced Action Buttons -->
                                    <div class="action-buttons d-flex flex-wrap gap-2 mb-3">
                                        <button class="btn btn-success btn-modern flex-grow-1" onclick="acceptRecommendation(@recommendation.Id)">
                                            <i class="fas fa-check me-1"></i>
                                            <span>Accept & Start</span>
                                        </button>
                                        <button class="btn btn-outline-primary btn-modern" onclick="viewRecommendationDetails(@recommendation.Id)" title="View Details">
                                            <i class="fas fa-info-circle"></i>
                                        </button>
                                        <button class="btn btn-outline-secondary btn-modern" title="Save for Later">
                                            <i class="fas fa-bookmark"></i>
                                        </button>
                                        <button class="btn btn-outline-danger btn-modern" title="Dismiss">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>

                                    <!-- Card Footer with Meta Info -->
                                    <div class="card-footer-modern pt-3 border-top">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <small class="text-muted d-flex align-items-center">
                                                <i class="fas fa-magic me-1 text-primary"></i>
                                                Generated @recommendation.CreatedDate.ToString("MMM dd, yyyy")
                                            </small>
                                            <div class="recommendation-tags">
                                                <span class="tag tag-@typeColor">@recommendation.Type</span>
                                                @if (recommendation.Priority >= 4)
                                                {
                                                    <span class="tag tag-danger">High Priority</span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Recommendations Pagination -->
                    @if (Model.RecommendationsPagination.TotalPages > 1)
                    {
                        <div class="recommendations-pagination" data-employee-id="@Model.SelectedEmployee.Id">
                            <nav aria-label="Recommendations Pagination" class="d-flex justify-content-between align-items-center mt-4 p-3 bg-light rounded">
                                <!-- Page Info -->
                                <div class="pagination-info">
                                    <small class="text-muted">
                                        Showing <strong>@Model.RecommendationsPagination.StartItem</strong> to <strong>@Model.RecommendationsPagination.EndItem</strong>
                                        of <strong>@Model.RecommendationsPagination.TotalItems</strong> recommendations
                                    </small>
                                </div>

                                <!-- Pagination Controls -->
                                <ul class="pagination pagination-sm mb-0">
                                    <!-- Previous Button -->
                                    <li class="page-item @(!Model.RecommendationsPagination.HasPreviousPage ? "disabled" : "")">
                                        <a class="page-link rec-page-link" href="javascript:void(0)"
                                           data-page="@(Model.RecommendationsPagination.CurrentPage - 1)"
                                           @(!Model.RecommendationsPagination.HasPreviousPage ? "tabindex=-1" : "")>
                                            <i class="fas fa-chevron-left"></i>
                                        </a>
                                    </li>

                                    <!-- Page Numbers -->
                                    @foreach (var pageNumber in Model.RecommendationsPagination.GetPageNumbers())
                                    {
                                        <li class="page-item @(pageNumber == Model.RecommendationsPagination.CurrentPage ? "active" : "")">
                                            <a class="page-link rec-page-link" href="javascript:void(0)" data-page="@pageNumber">
                                                @pageNumber
                                            </a>
                                        </li>
                                    }

                                    <!-- Next Button -->
                                    <li class="page-item @(!Model.RecommendationsPagination.HasNextPage ? "disabled" : "")">
                                        <a class="page-link rec-page-link" href="javascript:void(0)"
                                           data-page="@(Model.RecommendationsPagination.CurrentPage + 1)"
                                           @(!Model.RecommendationsPagination.HasNextPage ? "tabindex=-1" : "")>
                                            <i class="fas fa-chevron-right"></i>
                                        </a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }

                    <!-- Enhanced Summary Stats -->
                    <div class="summary-stats-modern mt-4">
                        <div class="row g-3">
                            <div class="col-md-3 col-6">
                                <div class="stat-card-modern text-center">
                                    <div class="stat-icon mb-2">
                                        <i class="fas fa-list text-primary"></i>
                                    </div>
                                    <div class="stat-value text-primary">@Model.RecommendationsPagination.TotalItems</div>
                                    <div class="stat-label">Total Recommendations</div>
                                </div>
                            </div>
                            <div class="col-md-3 col-6">
                                <div class="stat-card-modern text-center">
                                    <div class="stat-icon mb-2">
                                        <i class="fas fa-percentage text-success"></i>
                                    </div>
                                    <div class="stat-value text-success">@(Model.Recommendations.Any() ? (Model.Recommendations.Average(r => (double)r.ConfidenceScore) * 100).ToString("F0") : "0")%</div>
                                    <div class="stat-label">Avg. Confidence</div>
                                </div>
                            </div>
                            <div class="col-md-3 col-6">
                                <div class="stat-card-modern text-center">
                                    <div class="stat-icon mb-2">
                                        <i class="fas fa-exclamation-triangle text-warning"></i>
                                    </div>
                                    <div class="stat-value text-warning">@Model.Recommendations.Count(r => r.Priority >= 4)</div>
                                    <div class="stat-label">High Priority</div>
                                </div>
                            </div>
                            <div class="col-md-3 col-6">
                                <div class="stat-card-modern text-center">
                                    <div class="stat-icon mb-2">
                                        <i class="fas fa-chart-pie text-info"></i>
                                    </div>
                                    <div class="stat-value text-info">@Model.Recommendations.GroupBy(r => r.Type).Count()</div>
                                    <div class="stat-label">Categories</div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-search fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No Recommendations Available</h5>
                        <p class="text-muted">Our AI is analyzing the employee profile to generate personalized recommendations.</p>
                        <button class="btn btn-outline-primary" onclick="selectEmployee(@Model.SelectedEmployee.Id)">
                            <i class="fas fa-refresh"></i> Refresh Recommendations
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Add Skill Modal -->
<div class="modal fade" id="addSkillModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="fas fa-plus me-2"></i>Add New Skill
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addSkillForm">
                    <div class="mb-3">
                        <label for="skillName" class="form-label">Skill Name</label>
                        <input type="text" class="form-control" id="skillName" placeholder="e.g., JavaScript, Leadership" required>
                        <div class="form-text">Enter the name of the skill you want to add</div>
                    </div>
                    <div class="mb-3">
                        <label for="skillCategory" class="form-label">Category</label>
                        <select class="form-control" id="skillCategory" required>
                            <option value="">Choose category</option>
                            <option value="Programming">Programming</option>
                            <option value="Soft Skills">Soft Skills</option>
                            <option value="Technical">Technical</option>
                            <option value="Architecture & Cloud">Architecture & Cloud</option>
                            <option value="Project Management">Project Management</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="skillLevel" class="form-label">Proficiency Level</label>
                        <select class="form-control" id="skillLevel" required>
                            <option value="">Choose level</option>
                            <option value="0">Beginner - Just starting out</option>
                            <option value="1">Intermediate - Some experience</option>
                            <option value="2">Advanced - Highly skilled</option>
                            <option value="3">Expert - Master level</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="skillDescription" class="form-label">Description (Optional)</label>
                        <textarea class="form-control" id="skillDescription" rows="3"
                                  placeholder="Briefly describe your experience with this skill"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="addSkill()">
                    <i class="fas fa-plus me-1"></i>Add Skill
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Skill Management JavaScript -->
<script>
    let currentEmployeeId = @Model.SelectedEmployee.Id;

    function editExperience() {
        $('#experienceEditForm').slideDown();
        $('#experienceInput').focus();
    }

    function cancelEditExperience() {
        $('#experienceEditForm').slideUp();
        $('#experienceInput').val($('#experienceDisplay').text());
    }

    function saveExperience() {
        const newExperience = parseInt($('#experienceInput').val());

        if (newExperience < 0 || newExperience > 50) {
            showAlert('Please enter a valid experience value (0-50 years)', 'warning');
            return;
        }

        $.post('@Url.Action("UpdateExperience", "Dashboard")', {
            employeeId: currentEmployeeId,
            yearsOfExperience: newExperience
        })
        .done(function(response) {
            if (response.success) {
                $('#experienceDisplay').text(newExperience);
                $('#experienceEditForm').slideUp();
                showAlert('Experience updated successfully!', 'success');

                // Update the experience circle
                updateExperienceCircle(newExperience);
            } else {
                showAlert(response.message || 'Failed to update experience', 'danger');
            }
        })
        .fail(function() {
            showAlert('Failed to update experience', 'danger');
        });
    }

    function updateExperienceCircle(experience) {
        const circle = document.querySelector('#experienceDisplay').closest('.position-relative').querySelector('circle[stroke="url(#experienceGradient)"]');
        const newDashArray = 125 * Math.min(1, experience / 15.0);
        circle.setAttribute('stroke-dasharray', newDashArray);
    }

    function showAddSkillModal() {
        $('#addSkillModal').modal('show');
    }

    function addSkill() {
        const skillName = $('#skillName').val().trim();
        const skillCategory = $('#skillCategory').val();
        const skillLevel = parseInt($('#skillLevel').val());
        const skillDescription = $('#skillDescription').val().trim();

        if (!skillName || !skillCategory || skillLevel === null || skillLevel === undefined) {
            showAlert('Please fill in all required fields', 'warning');
            return;
        }

        $.post('@Url.Action("AddEmployeeSkill", "Dashboard")', {
            employeeId: currentEmployeeId,
            skillName: skillName,
            category: skillCategory,
            level: skillLevel,
            description: skillDescription
        })
        .done(function(response) {
            if (response.success) {
                $('#addSkillModal').modal('hide');
                $('#addSkillForm')[0].reset();
                showAlert('Skill added successfully!', 'success');

                // Add the skill to the UI
                addSkillToUI(response.skill);
                updateSkillsCount();
            } else {
                showAlert(response.message || 'Failed to add skill', 'danger');
            }
        })
        .fail(function() {
            showAlert('Failed to add skill', 'danger');
        });
    }

    function removeSkill(skillId, skillName) {
        if (!confirm(`Are you sure you want to remove the skill "${skillName}"?`)) {
            return;
        }

        $.post('@Url.Action("RemoveEmployeeSkill", "Dashboard")', {
            employeeId: currentEmployeeId,
            skillId: skillId
        })
        .done(function(response) {
            if (response.success) {
                // Remove skill from UI
                $(`[data-skill-id="${skillId}"]`).fadeOut(300, function() {
                    $(this).remove();
                    updateSkillsCount();
                });
                showAlert('Skill removed successfully!', 'success');
            } else {
                showAlert(response.message || 'Failed to remove skill', 'danger');
            }
        })
        .fail(function() {
            showAlert('Failed to remove skill', 'danger');
        });
    }

    function addSkillToUI(skill) {
        const skillConfig = getSkillConfig(skill.level);
        const skillHtml = `
            <div class="skill-badge d-inline-block me-2 mb-2 position-relative hover-lift"
                 data-skill-id="${skill.id}"
                 style="background: white; border: 2px solid var(--gray-200); border-radius: var(--radius-lg); padding: 0.5rem 0.75rem; transition: all var(--transition-normal);">
                <div class="d-flex align-items-center gap-2">
                    <i class="fas fa-${skillConfig.icon} text-${skillConfig.color}"></i>
                    <span class="fw-medium">${skill.name}</span>
                    <span class="badge badge-soft-${skillConfig.color}">${skill.levelName}</span>
                    <button class="btn btn-sm p-0 ms-1 text-danger skill-remove-btn"
                            onclick="removeSkill(${skill.id}, '${skill.name}')"
                            title="Remove Skill"
                            style="width: 20px; height: 20px; display: flex; align-items: center; justify-content: center; border: none; background: none; font-size: 0.7rem;">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
        `;
        $('#skillsContainer').append(skillHtml);
    }

    function getSkillConfig(level) {
        switch (level) {
            case 0: return { color: "secondary", icon: "seedling" };
            case 1: return { color: "warning", icon: "chart-line" };
            case 2: return { color: "success", icon: "trophy" };
            case 3: return { color: "primary", icon: "crown" };
            default: return { color: "secondary", icon: "circle" };
        }
    }

    function updateSkillsCount() {
        const count = $('#skillsContainer .skill-badge').length;
        $('#skillsCount').text(`${count} skills`);
    }

    function showAlert(message, type) {
        const alertHtml = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;

        // Remove existing alerts
        $('.alert').remove();

        // Add new alert at the top
        $('body').prepend('<div class="container mt-3">' + alertHtml + '</div>');

        // Auto remove after 3 seconds
        setTimeout(() => {
            $('.alert').fadeOut();
        }, 3000);
    }
</script>